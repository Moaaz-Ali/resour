.\"  Copyright (C) 2004 Red Hat, Inc.  All rights reserved.
.\"  
.\"  This copyrighted material is made available to anyone wishing to use,
.\"  modify, copy, or redistribute it subject to the terms and conditions
.\"  of the GNU General Public License v.2.

.TH ccs_test 8

.SH NAME
ccs_test - The diagnostic tool for a running Cluster Configuration System.

.SH SYNOPSIS
.B ccs_test
[\fBoptions\fP]
<\fBcommand\fP>

.SH DESCRIPTION
\fBccs_test\fP is part of the Cluster Configuration System (CCS).  It
is a diagnostic tool designed to validate the correct operation of a
running CCS system.  It will communicate with the CCS daemon - \fBccsd\fP -
to obtain any information stored in the system.

.SH OPTIONS
.TP
\fB-h\fP
Help.  Print out the usage syntax and exit.
.TP
\fB-V\fP
Print the version information and exit.

.SH COMMANDS
.TP
\fBconnect\fP \fI[force]\fP \fI[block]\fP \fI[cluster name]\fP
This command creates a connection to ccsd.  It returns a descriptor, which
is used as an parameter to other commands.

The 'force' key-word is used to establish a connection to ccsd in the
absence of a quorate cluster manager.

The 'block' key-word is used (with the 'force' key-word) to tell ccsd to
keep broadcasting for a valid configuration file until one is found.

The 'cluster name' is used (with the 'force' key-word) to specify that
only configuration files containing the given cluster name are valid
possibilities.

.TP
\fBget\fP \fI<desc>\fP \fI<request>\fP
Get the results of a given request.  The 'desc' is the number returned
from the \fBconnect\fP command.  The 'request' is a valid Xpath request.

If 'request' results in multiple matches, the first will be returned.
Subsequent calls with the same 'request' will result in the subsequent
matches.  Once all the matches have been returned, a subsequent call
will begin again with the first result.

.TP
\fBget_list\fP \fI<desc>\fP \fI<request>\fP
Similar to the \fBget\fP command.  However, issuing subsequent calls
with the same 'request' will result in all matches being returned (one
at a time), then null, then starting over with the first result.

.TP
\fBset\fP \fI<desc>\fP \fI<path>\fP \fI<value>\fP
Sets a particular 'path' to the given 'value'.  Not yet implemented.

.TP
\fBget_state\fP \fI<desc>\fP
Get the state associated with a given connection.

.TP
\fBset_state\fP \fI<desc>\fP \fI<ncwp>\fP
Set the current working path (cwp) to 'ncwp' for a given connection.

.SH EXAMPLES
.SS To connect to ccsd:

> ccs_test connect

Connect successful.
 Connection descriptor = 0

Or, if the cluster is not yet quorate and the name of the cluster is 'mycluster':

> ccs_test connect force block mycluster

Connect successful.
 Connection descriptor = 0

.SS To get the cluster name from ccsd:

> ccs_test get 0 /cluster/@name

Get successful.
 Value = <mycluster>

.SS To get the connection state:

> ccs_test get_state 0

Get state successful.
 Current working path:
 Previous query      : /cluster/@name


.SS To set the connection state:

> ccs_test set_state 0 /cluster

Set state successful.


.SS After setting the connection state, note the change:

> ccs_test get_state 0

Get state successful.
 Current working path: /cluster
 Previous query      : /cluster/@name

.SS After setting the connection state, you can now query with an absolute or relative path:

> ccs_test get 0 @name

Get successful.
 Value = <brassow>

> ccs_test get 0 /cluster/@name

Get successful.
 Value = <brassow>

.SS To disconnect:

> ccs_test disconnect 0

Disconnect successful.

.SH SEE ALSO
ccs(7), ccsd(8), cluster.conf(5)
