.TH gfs_edit 8

.SH NAME
gfs_edit - Display or edit GFS internal structures.

.SH SYNOPSIS
.B gfs_edit
[\fIOPTION\fR]... \fIDEVICE\fR

.SH DESCRIPTION
The gfs_edit command is a tool used to examine, edit or display internal
data structures of a GFS filesystem.  Use at your own risk.

.SH OPTIONS
.TP
\fB-V\fP
Print program version information only.

.SH INTERACTIVE MODE
There are three display modes: hex mode, structure mode and pointers mode.
You use the m key to switch between the modes, as described below.
The modes are as follows:
.TP
Hex mode (default)
Display or edit blocks of the file system in hexadecimal and ascii.

Lines at the top indicate the currently displayed block number in hex.
If the block contains a GFS data structure, the name of that
structure will appear in the upper right corner of the display.
If the block is a well-known block, such as the superblock or rindex,
there will be a line to indicate what it is.

In hex mode, you can edit blocks by pressing \fB<enter>\fP and entering
hexadecimal digits to replace the highlighted hex digits.  Do NOT precede
the numbers with "0x".  For example, if you want to change the value at
offset 0x60 from a 0x12 to 0xef, position your cursor to offset 0x60,
so that the 12 is highlighted, then press \fB<enter>\fP and type in "ef".
You will automatically be returned to display mode (Unlike gfs2_edit,
you may only edit one byte at a time.)

In hex mode, different colors indicate different things.
For example, an inode will appear white, block offsets will be light
blue, and actual data (anything after the gfs data structure) will be red.

.TP
Structure mode
Decode the file system block into its GFS structure and
display the values of that structure.  This mode is most useful for
jumping around the file system.  For example, you can use the arrow 
keys to position down to a pointer and press \fBJ\fP to jump to that block.

.TP
Pointers mode
Display any additional information appearing on the block.
For example, if an inode has block pointers, this will display them and
allow you to scroll through them.  You can also position to one of them
and press \fBJ\fP to jump to that block.

.SH Interactive mode command keys:
.TP
\fBq\fP or \fB<esc>\fP
The \fBq\fP or \fB<escape>\fP keys are used to exit gfs_edit.

.TP
\fB<arrow/movement keys>\fP up, down, right, left, pg-up, pg-down, home, end
The arrow keys are used to highlight an area of the display.  The \fBJ\fP
key may be used to jump to the block that is highlighted.

.TP
\fBm\fP - Mode switch
The \fBm\fP key is used to switch between the three display modes.
The initial mode is hex mode.  Pressing the \fBm\fP key once switches to
structure mode.  Pressing it a second time switches from structure mode
to pointers mode.  Pressing it a third time takes you back to hex mode again.

.TP
\fBj\fP - Jump to block
The \fBj\fP key jumps to the block number that is currently highlighted.
In hex mode, hitting J will work when any byte of the pointer is highlighted.

.TP
\fBg\fP - Goto block
The \fBg\fP key asks for a block number, then jumps there.  Note that
in many cases, you can also arrow up so that the current block number
is highlighted, then press \fB<enter>\fP to enter a block number to jump to
in hexadecimal, with no leading "0x".

.TP
\fBh\fP - Help display
The \fBh\fP key causes the interactive help display to be shown.

.TP
\fBf\fP or \fB<space>\fP - Forward block
The \fBf\fP key causes you to scroll forward one block.

.TP
\fBb\fP - Backward block
The \fBb\fP key causes you to scroll backward one block.

.TP
\fB<home>\fP - Return to superblock
The \fB<home>\fP key takes you back to the superblock.

.TP
\fB<backspace>\fP
This takes you back to the block you were displaying previously.
Unlike gfs2_edit, gfs_edit only remembers the one block you previously viewed.

.SH EXAMPLES
.TP
gfs_edit /dev/vg0/lvol0
This will display the superblock of the gfs file system located on
/dev/vg0/lvol0 and allow you to edit.

.SH KNOWN LIMITATIONS
.TP
Shortcomings compared to gfs2_edit
Unlike gfs2_edit, gfs_edit cannot print data structures.  There is no
alternate color scheme.  It does not remember multiple block jumps,
and it can not parse the rindex file and other data structures.
It only operates on file systems with the default 4K block size.
It does not work with gfs2 file systems.

Since this is primarily a debugging tool and since gfs2_edit can do
more than gfs_edit can, we have no plans at this time to enhance gfs_edit.

.SH SEE ALSO
gfs2_edit(8)
