#!/bin/sh
#
#
# MySQL
#
# Description:	Manages a MySQL database as Linux-HA resource

#
# Author:	Alan Robertson 		: DB2 Script
# Author:	Jakub Janczak  		: Rewrite as MySQL
# Author:	Andrew Beekhof 		: Cleanup and import
# Author:	Sebastian Reitenbach    : add OpenBSD defaults, more cleanup
# Author:  Narayan Newton      : Add Gentoo/Debian defaults
#
# Support:	linux-ha@lists.linux-ha.org
# License:	GNU General Public License (GPL)
# Copyright:	(C) 2002 - 2005 International Business Machines, Inc.
#
# An example usage in /etc/ha.d/haresources:
#       node1  10.0.0.170 mysql
#
# See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_binary
#   OCF_RESKEY_client_binary
#   OCF_RESKEY_config
#   OCF_RESKEY_datadir
#   OCF_RESKEY_user
#   OCF_RESKEY_group
#   OCF_RESKEY_test_table
#   OCF_RESKEY_test_user
#   OCF_RESKEY_test_passwd
#   OCF_RESKEY_enable_creation
#   OCF_RESKEY_additional_parameters
#   OCF_RESKEY_log
#   OCF_RESKEY_pid
#   OCF_RESKEY_socket
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified
HOSTOS=`uname`
if [ "X${HOSTOS}" = "XOpenBSD" ];then
OCF_RESKEY_binary_default="/usr/local/bin/mysqld_safe"
OCF_RESKEY_config_default="/etc/my.cnf"
OCF_RESKEY_datadir_default="/var/mysql"
OCF_RESKEY_user_default="_mysql"
OCF_RESKEY_group_default="_mysql"
OCF_RESKEY_log_default="/var/log/mysqld.log"
OCF_RESKEY_pid_default="/var/mysql/mysqld.pid"
OCF_RESKEY_socket_default="/var/run/mysql/mysql.sock"
else
OCF_RESKEY_binary_default="/usr/bin/safe_mysqld"
OCF_RESKEY_config_default="/etc/my.cnf"
OCF_RESKEY_datadir_default="/var/lib/mysql"
OCF_RESKEY_user_default="mysql"
OCF_RESKEY_group_default="mysql"
OCF_RESKEY_log_default="/var/log/mysqld.log"
OCF_RESKEY_pid_default="/var/run/mysql/mysqld.pid"
OCF_RESKEY_socket_default="/var/lib/mysql/mysql.sock"
fi
OCF_RESKEY_client_binary_default="mysql"
OCF_RESKEY_test_user_default="root"
OCF_RESKEY_test_table_default="mysql.user"
OCF_RESKEY_test_passwd_default=""
OCF_RESKEY_enable_creation_default=0
OCF_RESKEY_additional_parameters_default=""
OCF_RESKEY_replication_port_default="3306"

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
MYSQL_BINDIR=`dirname ${OCF_RESKEY_binary}`

: ${OCF_RESKEY_client_binary=${OCF_RESKEY_client_binary_default}}

: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_datadir=${OCF_RESKEY_datadir_default}}

: ${OCF_RESKEY_user=${OCF_RESKEY_user_default}}
: ${OCF_RESKEY_group=${OCF_RESKEY_group_default}}

: ${OCF_RESKEY_log=${OCF_RESKEY_log_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_socket=${OCF_RESKEY_socket_default}}

: ${OCF_RESKEY_test_user=${OCF_RESKEY_test_user_default}}
: ${OCF_RESKEY_test_table=${OCF_RESKEY_test_table_default}}
: ${OCF_RESKEY_test_passwd=${OCF_RESKEY_test_passwd_default}}

: ${OCF_RESKEY_enable_creation=${OCF_RESKEY_enable_creation_default}}
: ${OCF_RESKEY_additional_parameters=${OCF_RESKEY_additional_parameters_default}}

: ${OCF_RESKEY_replication_user=${OCF_RESKEY_replication_user_default}}
: ${OCF_RESKEY_replication_passwd=${OCF_RESKEY_replication_passwd_default}}
: ${OCF_RESKEY_replication_port=${OCF_RESKEY_replication_port_default}}

#######################################################################

usage() {
  cat <<UEND
	usage: $0 (start|stop|validate-all|meta-data|monitor|promote|demote|notify)

	$0 manages a MySQL Database as an HA resource.

	The 'start' operation starts the database.
	The 'stop' operation stops the database.
	The 'status' operation reports whether the database is running
	The 'monitor' operation reports whether the database seems to be working
	The 'promote' operation makes this mysql server run as master
	The 'demote' operation makes this mysql server run as slave
	The 'validate-all' operation reports whether the parameters are valid

UEND
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="mysql">
<version>1.0</version>

<longdesc lang="en">
Resource script for MySQL. 
It manages a MySQL Database instance as an HA resource.
</longdesc>
<shortdesc lang="en">Manages a MySQL database instance</shortdesc>

<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the MySQL server binary
</longdesc>
<shortdesc lang="en">MySQL server binary</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="client_binary" unique="0" required="0">
<longdesc lang="en">
Location of the MySQL client binary
</longdesc>
<shortdesc lang="en">MySQL client binary</shortdesc>
<content type="string" default="${OCF_RESKEY_client_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Configuration file
</longdesc>
<shortdesc lang="en">MySQL config</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="datadir" unique="0" required="0">
<longdesc lang="en">
Directory containing databases
</longdesc>
<shortdesc lang="en">MySQL datadir</shortdesc>
<content type="string" default="${OCF_RESKEY_datadir_default}" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
User running MySQL daemon
</longdesc>
<shortdesc lang="en">MySQL user</shortdesc>
<content type="string" default="${OCF_RESKEY_user_default}" />
</parameter>

<parameter name="group" unique="0" required="0">
<longdesc lang="en">
Group running MySQL daemon (for logfile and directory permissions)
</longdesc>
<shortdesc lang="en">MySQL group</shortdesc>
<content type="string" default="${OCF_RESKEY_group_default}"/>
</parameter>

<parameter name="log" unique="0" required="0">
<longdesc lang="en">
The logfile to be used for mysqld.
</longdesc>
<shortdesc lang="en">MySQL log file</shortdesc>
<content type="string" default="${OCF_RESKEY_log_default}"/>
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pidfile to be used for mysqld.
</longdesc>
<shortdesc lang="en">MySQL pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}"/>
</parameter>

<parameter name="socket" unique="0" required="0">
<longdesc lang="en">
The socket to be used for mysqld.
</longdesc>
<shortdesc lang="en">MySQL socket</shortdesc>
<content type="string" default="${OCF_RESKEY_socket_default}"/>
</parameter>

<parameter name="test_table" unique="0" required="0">
<longdesc lang="en">
Table to be tested in monitor statement (in database.table notation)
</longdesc>
<shortdesc lang="en">MySQL test table</shortdesc>
<content type="string" default="${OCF_RESKEY_test_table_default}" />
</parameter>

<parameter name="test_user" unique="0" required="0">
<longdesc lang="en">
MySQL test user
</longdesc>
<shortdesc lang="en">MySQL test user</shortdesc>
<content type="string" default="${OCF_RESKEY_test_user_default}" />
</parameter>

<parameter name="test_passwd" unique="0" required="0">
<longdesc lang="en">
MySQL test user password
</longdesc>
<shortdesc lang="en">MySQL test user password</shortdesc>
<content type="string" default="${OCF_RESKEY_test_passwd_default}" />
</parameter>

<parameter name="enable_creation" unique="0" required="0">
<longdesc lang="en">
If the MySQL database does not exist, it will be created
</longdesc>
<shortdesc lang="en">Create the database if it does not exist</shortdesc>
<content type="integer" default="${OCF_RESKEY_enable_creation_default}"/>
</parameter>

<parameter name="additional_parameters" unique="0" required="0">
<longdesc lang="en">
Additional parameters which are passed to the mysqld on startup.
(e.g. --skip-external-locking or --skip-grant-tables)
</longdesc>
<shortdesc lang="en">Additional parameters to pass to mysqld</shortdesc>
<content type="string" default="${OCF_RESKEY_additional_parameters_default}"/>
</parameter>

<parameter name="replication_user" unique="0" required="0">
<longdesc lang="en">
MySQL replication user. This user is used for the replication, for
determining the master log and position, and for setting and unsetting
read-only mode . Because of that, this user should have SUPER
privileges on all nodes within the cluster.
</longdesc>
<shortdesc lang="en">MySQL replication user</shortdesc>
<content type="string" default="${OCF_RESKEY_replication_user_default}" />
</parameter>

<parameter name="replication_passwd" unique="0" required="0">
<longdesc lang="en">
MySQL replication password. Used for replication client and slave.
</longdesc>
<shortdesc lang="en">MySQL replication user password</shortdesc>
<content type="string" default="${OCF_RESKEY_replication_passwd_default}" />
</parameter>

<parameter name="replication_port" unique="0" required="0">
<longdesc lang="en">
The port on which the Master MySQL instance is listening.
</longdesc>
<shortdesc lang="en">MySQL replication port</shortdesc>
<content type="string" default="${OCF_RESKEY_replication_port_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="120" />
<action name="stop" timeout="120" />
<action name="status" timeout="60" />
<action name="monitor" depth="0" timeout="30" interval="10" />
<action name="promote" timeout="120" />
<action name="demote" timeout="120" />
<action name="notify" timeout="90" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}
#######################################################################
# Convenience variables

MYSQL=$OCF_RESKEY_client_binary
MYSQL_OPTIONS_LOCAL="-S $OCF_RESKEY_socket -O connect_timeout=1"
MYSQL_OPTIONS_REPL="--user=$OCF_RESKEY_replication_user --password=$OCF_RESKEY_replication_passwd"

#######################################################################

# Convenience functions

set_read_only() {
    # Sets or unsets read-only mode. Accepts one boolean as its
    # optional argument. If invoked without any arguments, defaults to
    # enabling read only mode. Should only be set in master/slave
    # setups.
    # Returns $OCF_SUCCESS if the operation succeeds, or
    # $OCF_ERR_GENERIC if it fails.
    local ro_val
    if ocf_is_true $1; then
	ro_val="on"
    else
	ro_val="off"
    fi
    local mysql_options
    mysql_options="$MYSQL_OPTIONS_LOCAL"
    if [ -n $OCF_RESKEY_replication_user ]; then
	mysql_options="$mysql_options $MYSQL_OPTIONS_REPL"
    fi
    ocf_run $MYSQL $mysql_options \
	-e "SET GLOBAL read_only=${ro_val}"
}

is_slave() {
    # Determine whether the machine is currently running as a MySQL
    # slave, as determined per SHOW SLAVE STATUS. Returns 1 if SHOW
    # SLAVE STATUS creates an empty result set, 0 otherwise.
    local rc
    local tmpfile
    local mysql_options

    tmpfile=`mktemp ${HA_RSCTMP}/is_slave.${OCF_RESOURCE_INSTANCE}.XXXXXX`

    mysql_options="$MYSQL_OPTIONS_LOCAL --user=$OCF_RESKEY_test_user --password=$OCF_RESKEY_test_passwd"

    $MYSQL $mysql_options \
        -e 'SHOW SLAVE STATUS\G' > $tmpfile

    # "SHOW SLAVE STATUS" returns an empty set if instance is not a
    # replication slave
    if [ -s $tmpfile ]; then
	rm -f $tmpfile
	return 0
    fi

    rm -f $tmpfile
    return 1
}

check_slave() {
    # Checks slave status
    local rc
    local tmpfile
    local mysql_options

    rc=1
    tmpfile=`mktemp ${HA_RSCTMP}/check_slave.${OCF_RESOURCE_INSTANCE}.XXXXXX`

    mysql_options="$MYSQL_OPTIONS_LOCAL --user=$OCF_RESKEY_test_user --password=$OCF_RESKEY_test_passwd"

    $MYSQL $mysql_options \
        -e 'SHOW SLAVE STATUS\G' > $tmpfile

    local master_host
    local master_user
    local master_port
    local slave_sql
    local slave_io
    local last_errno

    if [ -s $tmpfile ]; then
	master_host=`sed -ne 's/^.*Master_Host: \(.*\)$/\1/p' < $tmpfile`
	master_user=`sed -ne 's/^.*Master_User: \(.*\)$/\1/p' < $tmpfile`
	master_port=`sed -ne 's/^.*Master_Port: \(.*\)$/\1/p' < $tmpfile`
	slave_sql=`sed -ne 's/^.*Slave_SQL_Running: \(.*\)$/\1/p' < $tmpfile`
	slave_io=`sed -ne 's/^.*Slave_IO_Running: \(.*\)$/\1/p' < $tmpfile`
	last_errno=`sed -ne 's/^.*Last_Errno: \(.*\)$/\1/p' < $tmpfile`

	if [ $last_errno -ne 0 ]; then
	    # Whoa. Replication ran into an error. This slave has
	    # diverged from its master. Make sure this resource
	    # doesn't restart in place.
	    ocf_log err "MySQL instance configured for replication, but replication has failed."
	    ocf_log err "See $tmpfile for details"
	    exit $OCF_ERR_INSTALLED
	fi

	if [ "$slave_io" != 'Yes' ]; then
	    # Not necessarily a bad thing. The master may have
	    # temporarily shut down, and the slave may just be
	    # reconnecting. A warning can't hurt, though.
	    ocf_log warn "MySQL Slave IO threads currently not running."
	fi

	if [ "$slave_sql" != 'Yes' ]; then
	    # We don't have a replication SQL thread running. Not a
	    # good thing. Try to recoved by restarting the resource in
	    # place.
	    ocf_log err "MySQL Slave SQL threads currently not running."
	    ocf_log err "See $tmpfile for details"
	    exit $OCF_ERR_GENERIC
	fi

	ocf_log debug "MySQL instance running as a replication slave"
	rm -f $tmpfile
    else
        # Instance produced an empty "SHOW SLAVE STATUS" output --
        # instance is not a slave
	rm -f $tmpfile
	ocf_log err "check_slave invoked on an instance that is not a replication slave."
	exit $OCF_ERR_GENERIC
    fi
}

set_master() {
    # Informs the MySQL server of the master to replicate
    # from. Accepts one mandatory argument which must contain the host
    # name of the new master host. The master must either be unchanged
    # from the laste master the slave replicated from, or freshly
    # reset with RESET MASTER.
    local master_host
    master_host=$1

    ocf_run $MYSQL $MYSQL_OPTIONS_LOCAL $MYSQL_OPTIONS_REPL \
	-e "CHANGE MASTER TO MASTER_HOST='$master_host'"
}

unset_master(){
    # Instructs the MySQL server to stop replicating from a master
    # host.
    local mysql_options
    mysql_options="$MYSQL_OPTIONS_LOCAL $MYSQL_OPTIONS_REPL"

    # First, stop the slave I/O thread and wait for relay log
    # processing to complete
    ocf_run $MYSQL $mysql_options \
	-e "STOP SLAVE IO_THREAD" || exit $OCF_ERR_GENERIC
    while true; do
	$MYSQL $mysql_options \
	    -e "SHOW PROCESSLIST\G" | grep "Has read all relay log" && break
	ocf_log info "Waiting for MySQL slave to finish processing relay log"
	sleep 1
    done

    # Now, stop all slave activity and unset the master host
    ocf_run $MYSQL $mysql_options \
	-e "STOP SLAVE"
    ocf_run $MYSQL $mysql_options \
	-e "CHANGE MASTER TO MASTER_HOST=''"
}

#######################################################################

# Functions invoked by resource manager actions

mysql_validate() {
    check_binary $OCF_RESKEY_binary
    check_binary  $OCF_RESKEY_client_binary

    if [ ! -f $OCF_RESKEY_config ]; then
	ocf_log err "Config $OCF_RESKEY_config doesn't exist";
	return $OCF_ERR_CONFIGURED;
    fi

    if [ ! -d $OCF_RESKEY_datadir ]; then
	ocf_log err "Datadir $OCF_RESKEY_datadir doesn't exist";
	return $OCF_ERR_CONFIGURED;
    fi

    getent passwd $OCF_RESKEY_user >/dev/null 2>&1
    if [ ! $? -eq 0 ]; then
	ocf_log err "User $OCF_RESKEY_user doesn't exit";
	return $OCF_ERR_INSTALLED;
    fi

    getent group $OCF_RESKEY_group >/dev/null 2>&1
    if [ ! $? -eq 0 ]; then
	ocf_log err "Group $OCF_RESKEY_group doesn't exist";
	return $OCF_ERR_INSTALLED;
    fi

    true
}

mysql_status() {
	if [ ! -e $OCF_RESKEY_pid ]; then
		ocf_log debug "MySQL is not running"
		return $OCF_NOT_RUNNING;
	fi

	pid=`cat $OCF_RESKEY_pid`;
	if [ -d /proc -a -d /proc/1 ]; then
		[ "u$pid" != "u" -a -d /proc/$pid ]
	else
		kill -0 $pid >/dev/null 2>&1
	fi

	if [ $? -eq 0 ]; then
	    return $OCF_SUCCESS;
	else
	    ocf_log debug "MySQL not running: removing old PID file"
	    rm -f $OCF_RESKEY_pid
	    return $OCF_NOT_RUNNING;
	fi
}

mysql_monitor() {
    local rc
    mysql_status
    rc=$?

    # If status returned an error, return that immediately
    if [ $rc -ne $OCF_SUCCESS ]; then
	return $rc
    fi

    # Check if this instance is configured as a slave, and if so check
    # slave status
    if is_slave; then
	check_slave
    fi

    if [ $OCF_CHECK_LEVEL -gt 0 ]; then
	local mysql_options
	mysql_options="$MYSQL_OPTIONS_LOCAL --user=$OCF_RESKEY_test_user --password=$OCF_RESKEY_test_passwd"

        # Check for test table
	ocf_run $MYSQL $mysql_options \
	    -e "SELECT COUNT(*) FROM $OCF_RESKEY_test_table"
	rc=$?

	if [ $rc -ne 0 ]; then
	    ocf_log err "Failed to select from $test_table";
	    return $OCF_ERR_GENERIC;
	fi
    fi

    ocf_log info "MySQL monitor succeeded";
    return $OCF_SUCCESS
}

mysql_start() {
    mysql_status
    if [ $? = $OCF_SUCCESS ]; then
	ocf_log info "MySQL already running"
	return $OCF_SUCCESS
    fi

    touch $OCF_RESKEY_log
    chown $OCF_RESKEY_user:$OCF_RESKEY_group $OCF_RESKEY_log
    chmod 0640 $OCF_RESKEY_log
    [ -x /sbin/restorecon ] && /sbin/restorecon $OCF_RESKEY_log

    if [ "$OCF_RESKEY_enable_creation" = 1 -a ! -d $OCF_RESKEY_datadir/mysql ] ; then
        ocf_log info "Initializing MySQL database: "
	$MYSQL_BINDIR/mysql_install_db --datadir=$OCF_RESKEY_datadir
        rc=$?
        if [ $rc -ne 0 ] ; then
	    ocf_log err "Initialization failed: $rc";
            exit $OCF_ERR_GENERIC
        fi
        chown -R $OCF_RESKEY_user:$OCF_RESKEY_group $OCF_RESKEY_datadir
    fi

    pid_dir=`dirname $OCF_RESKEY_pid`
    if ! su -s /bin/sh - $OCF_RESKEY_user -c "test -w $pid_dir"; then
	ocf_log err "Directory $pid_dir for pidfile $OCF_RESKEY_pid is not writable by $OCF_RESKEY_user"
	return $OCF_ERR_PERM;
    fi
    if [ ! -d $pid_dir ] ; then
	ocf_log info "Creating PID dir: $pid_dir"
	mkdir -p $pid_dir
	chown $OCF_RESKEY_user:$OCF_RESKEY_group $pid_dir
    fi

    socket_dir=`dirname $OCF_RESKEY_socket`
    if [ ! -d $socket_dir ] ; then
	ocf_log info "Creating socket dir: $socket_dir"
	mkdir -p $socket_dir
	chown $OCF_RESKEY_user:$OCF_RESKEY_group $socket_dir
    fi

    # Uncomment to perform permission clensing
    # - not convinced this should be enabled by default
    #
    #chmod 0755 $OCF_RESKEY_datadir
    #chown -R $OCF_RESKEY_user $OCF_RESKEY_datadir
    #chgrp -R $OCF_RESKEY_group $OCF_RESKEY_datadir

    ${OCF_RESKEY_binary} --defaults-file=$OCF_RESKEY_config \
		--pid-file=$OCF_RESKEY_pid \
		--socket=$OCF_RESKEY_socket \
		--datadir=$OCF_RESKEY_datadir \
		--user=$OCF_RESKEY_user $OCF_RESKEY_additional_parameters >/dev/null 2>&1 &
    rc=$?

    if [ $rc != 0 ]; then
	ocf_log err "MySQL start command failed: $rc"
  	return $rc
    fi

    # Spin waiting for the server to come up.
    # Let the CRM/LRM time us out if required
    start_wait=1
    while [ $start_wait = 1 ]; do
	mysql_status
	rc=$?
	if [ $rc = $OCF_SUCCESS ]; then
	    start_wait=0

	elif [ $rc != $OCF_NOT_RUNNING ]; then
	    ocf_log info "MySQL start failed: $rc"
	    return $rc
	fi
        sleep 2
    done

    if ocf_is_ms; then
	set_read_only on
    fi
    
    ocf_log info "MySQL started"
    return $OCF_SUCCESS
}

mysql_stop() {
    if [ ! -f $OCF_RESKEY_pid ]; then
	ocf_log info "MySQL is not running"
        return $OCF_SUCCESS
    fi

    pid=`cat $OCF_RESKEY_pid 2> /dev/null `
	/bin/kill $pid > /dev/null
    rc=$?
    if [ $rc != 0 ]; then
        ocf_log err "MySQL couldn't be stopped"
	return $OCF_ERR_GENERIC
    fi

	# stop waiting
    shutdown_timeout=$((($OCF_RESKEY_CRM_meta_timeout/1000)-5))
    count=0
    while [ $count -lt $shutdown_timeout ]
    do
	mysql_status
	rc=$?
	if [ $rc = $OCF_NOT_RUNNING ]; then
	    break
	fi
	count=`expr $count + 1`
	sleep 1
	ocf_log debug "MySQL still hasn't stopped yet. Waiting..."
    done

    mysql_status
    if [ $? != $OCF_NOT_RUNNING ]; then
	ocf_log info "MySQL failed to stop after ${shutdown_timeout}s using SIGTERM. Trying SIGKILL..."
	/bin/kill -KILL $pid > /dev/null
    fi

    ocf_log info "MySQL stopped";
    rm -f /var/lock/subsys/mysqld
    rm -f $OCF_RESKEY_socket
    return $OCF_SUCCESS
}

mysql_promote() {
    if ( ! mysql_status ); then
	return $OCF_NOT_RUNNING
    fi
    set_read_only off || return $OCF_ERR_GENERIC
    return $OCF_SUCCESS
}

mysql_demote() {
    set_read_only on
}

mysql_notify() {
    # If not configured as a Stateful resource, we make no sense of
    # notifications.
    if ! ocf_is_ms; then
	ocf_log info "This agent makes no use of notifications unless running in master/slave mode."
	return $OCF_SUCCESS
    fi

    local type_op
    type_op="${OCF_RESKEY_CRM_meta_notify_type}-${OCF_RESKEY_CRM_meta_notify_operation}"

    ocf_log debug "Received $type_op notification."

    case "$type_op" in
	'pre-promote')
	    # A new master is about to being promoted. It's not in
	    # read-write mode yet (that only occurs when it actually
	    # executes the promote action), so we can now safely
	    # connect to it and wait for it to start replicating.
	    local master_host
	    local master_status
	    master_host=$OCF_RESKEY_CRM_meta_notify_promote_uname

	    if ( ! mysql_status ); then
		return $OCF_NOT_RUNNING
	    fi
	    if [ -z "$master_host" ]; then
		ocf_log err "Unable to determine master host!"
		return $OCF_ERR_GENERIC
	    fi

	    if [ $master_host = `uname -n` ]; then
		ocf_log info "Resetting MySQL replication configuration on new master $master_host"
		ocf_run $MYSQL $MYSQL_OPTIONS_LOCAL $MYSQL_OPTIONS_REPL \
		    -e 'RESET MASTER';
	    else
		ocf_log info "Changing MySQL configuration to replicate from $master_host"
		set_master $master_host
	    fi
	    ;;
	'post-promote')
	    # The master has completed its promotion. Now is a good
	    # time to check whether our replication slave is working
	    # correctly.
	    if [ $OCF_RESKEY_CRM_meta_notify_promote_uname = `uname -n` ]; then
		ocf_log info "Ignoring post-promote notification for my own promotion."
		return $OCF_SUCCESS
	    fi
	    ocf_run $MYSQL $MYSQL_OPTIONS_LOCAL $MYSQL_OPTIONS_REPL \
		-e 'START SLAVE';
	    ;;
	'post-demote')
	    if [ $OCF_RESKEY_CRM_meta_notify_demote_uname = `uname -n` ]; then
		ocf_log info "Ignoring post-demote notification for my own demotion."
		return $OCF_SUCCESS
	    fi
	    # The former master has just been gracefully demoted.
	    unset_master
	    ;;
	*)
	    return $OCF_SUCCESS
	    ;;
    esac
}

#######################################################################

case "$1" in
  meta-data)	meta_data
		exit $OCF_SUCCESS;;
  usage|help)	usage
		exit $OCF_SUCCESS;;
esac

mysql_validate
rc=$?
LSB_STATUS_STOPPED=3
if [ $rc -ne 0 ]; then
	case "$1" in
		stop) exit $OCF_SUCCESS;;
		monitor) exit $OCF_NOT_RUNNING;;
		status) exit $LSB_STATUS_STOPPED;;
		*) exit $rc;;
	esac
fi

# What kind of method was invoked?
case "$1" in
  start)	mysql_start;;
  stop)		mysql_stop;;
  status)	mysql_status;;
  monitor)	mysql_monitor;;
  promote)	mysql_promote;;
  demote)	mysql_demote;;
  notify)	mysql_notify;;
  validate-all)	exit $OCF_SUCCESS;;

 *)		usage
		exit $OCF_ERR_UNIMPLEMENTED;;
esac
